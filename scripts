{"basic_sword.gd":"extends Node2D\n\nvar active_timer = 0\n\n#@onready var player = $Guy_man\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n\t\n\tif(Input.is_action_just_pressed(\"attack\")):\n\t\tactive_timer=25\n\t\n\tif(active_timer>0):\n\t\tself.visible=true\n\t\tactive_timer-=60*delta\n\telse:\n\t\tself.visible=false\n\t#position.x=player.position.x\n\t#position.y=player.position.y\n\tpass\n","guy_man.gd":"extends CharacterBody2D\n\n\n@export var SPEED = 160.0\n@export var JUMP_VELOCITY = -300.0\n\n# Get the gravity from the project settings to be synced with RigidBody nodes.\nvar gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")\n\n\nfunc _physics_process(delta):\n\t# Add the gravity.\n\tif not is_on_floor():\n\t\tvelocity.y += gravity * delta\n\t\t\n\n\t# Handle jump.\n\tif Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():\n\t\tvelocity.y = JUMP_VELOCITY\n\n\t# Get the input direction and handle the movement/deceleration.\n\t# As good practice, you should replace UI actions with custom gameplay actions.\n\tvar direction = Input.get_axis(\"ui_left\", \"ui_right\")\n\tif direction:\n\t\tvelocity.x = direction * SPEED\n\telse:\n\t\tvelocity.x = move_toward(velocity.x, 0, SPEED)\n\n\tmove_and_slide()\n"}